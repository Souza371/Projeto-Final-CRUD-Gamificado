<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema CRUD Gamificado</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        :root {
            --primary: #4ecca3;
            --secondary: #2b8c6b;
            --dark: #23233c;
            --light: #f8f8f8;
            --danger: #f05945;
            --warning: #ff9a3c;
            --info: #3498db;
            --user-color: #4ecca3;
        }

        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
            color: #fff;
            min-height: 100vh;
            padding: 20px;
        }

        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(45, 52, 75, 0.8);
            border-radius: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-avatar {
            width: 60px;
            height: 60px;
            background: var(--user-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.8rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .user-avatar:hover {
            transform: scale(1.1);
        }

        .header-title h1 {
            font-size: 2.2rem;
            color: var(--primary);
            text-shadow: 0 0 10px rgba(78, 204, 163, 0.7);
            margin-bottom: 5px;
        }

        .header-title p {
            font-size: 1rem;
            color: var(--light);
        }

        .gamification-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(35, 35, 60, 0.9);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 30px;
        }

        .user-info {
            display: flex;
            align-items: center;
        }

        .level {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--light);
        }

        .xp-progress {
            flex-grow: 1;
            max-width: 300px;
            background: #23233c;
            height: 20px;
            border-radius: 10px;
            overflow: hidden;
            margin: 0 15px;
        }

        .xp-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            width: 65%;
            border-radius: 10px;
            transition: width 0.5s ease;
        }

        .points {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--primary);
        }

        .crud-container {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .form-container, .list-container {
            background: rgba(45, 52, 75, 0.9);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
        }

        h2 {
            color: var(--primary);
            margin-bottom: 20px;
            text-align: center;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: var(--light);
        }

        input, select, textarea {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.9);
            color: var(--dark);
            font-size: 1rem;
        }

        button {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
            margin-top: 10px;
        }

        .btn-primary {
            background: var(--primary);
            color: var(--dark);
        }

        .btn-primary:hover {
            background: var(--secondary);
            transform: translateY(-2px);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        }

        .btn-secondary {
            background: var(--danger);
            color: var(--light);
        }

        .btn-secondary:hover {
            background: #d44a38;
            transform: translateY(-2px);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        }

        .filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .filters input {
            flex-grow: 1;
        }

        .item-list {
            list-style: none;
            max-height: 400px;
            overflow-y: auto;
        }

        .item-list li {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s;
        }

        .item-list li:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateX(5px);
        }

        .item-info {
            flex-grow: 1;
        }

        .item-actions {
            display: flex;
            gap: 10px;
        }

        .btn-edit {
            background: var(--info);
            color: white;
            padding: 8px 12px;
            font-size: 0.9rem;
        }

        .btn-delete {
            background: var(--danger);
            color: white;
            padding: 8px 12px;
            font-size: 0.9rem;
        }

        .priority-badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
            margin-left: 8px;
        }

        .priority-baixa {
            background: var(--primary);
            color: var(--dark);
        }

        .priority-media {
            background: var(--warning);
            color: var(--dark);
        }

        .priority-alta {
            background: var(--danger);
            color: white;
        }

        .achievements {
            background: rgba(45, 52, 75, 0.9);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            margin-bottom: 30px;
        }

        .badges {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 20px;
        }

        .badge {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            box-shadow: 0 0 15px rgba(78, 204, 163, 0.5);
        }

        .badge.locked {
            background: linear-gradient(135deg, #555, #333);
            box-shadow: none;
            color: #777;
        }

        footer {
            text-align: center;
            padding: 20px;
            background: rgba(35, 35, 60, 0.9);
            border-radius: 15px;
            margin-top: 30px;
        }

        .profile-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: var(--dark);
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 0 30px rgba(78, 204, 163, 0.5);
        }

        .color-options {
            display: flex;
            gap: 10px;
            margin: 15px 0;
            flex-wrap: wrap;
        }

        .color-option {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.3s;
        }

        .color-option:hover {
            transform: scale(1.1);
        }

        .color-option.selected {
            border-color: white;
            box-shadow: 0 0 10px white;
        }

        @media (max-width: 768px) {
            .crud-container {
                grid-template-columns: 1fr;
            }
            
            .gamification-bar {
                flex-direction: column;
                gap: 15px;
            }
            
            .xp-progress {
                max-width: 100%;
            }
            
            header {
                flex-direction: column;
                gap: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="header-left">
                <div class="user-avatar" id="user-avatar">V</div>
                <div class="header-title">
                    <h1>Sistema CRUD Gamificado</h1>
                    <p>Gerencie seus itens de forma divertida e eficiente!</p>
                </div>
            </div>
        </header>

        <div class="gamification-bar">
            <div class="user-info">
                <div class="level">Nível 5</div>
            </div>
            <div class="xp-progress">
                <div class="xp-progress-bar" id="xp-bar"></div>
            </div>
            <div class="points">250 XP</div>
        </div>

        <div class="crud-container">
            <div class="form-container">
                <h2>Adicionar Item</h2>
                <form id="item-form">
                    <div class="form-group">
                        <label for="name">Nome do Item</label>
                        <input type="text" id="name" placeholder="Digite o nome" required>
                    </div>
                    <div class="form-group">
                        <label for="category">Categoria</label>
                        <select id="category">
                            <option value="tarefa">Tarefa</option>
                            <option value="desafio">Desafio</option>
                            <option value="missao">Missão</option>
                            <option value="evento">Evento</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="description">Descrição</label>
                        <textarea id="description" rows="3" placeholder="Descreva o item"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="priority">Nível de Prioridade (Prazo)</label>
                        <select id="priority">
                            <option value="baixa">Baixa (Mais de 15 dias)</option>
                            <option value="media">Média (Entre 10-15 dias)</option>
                            <option value="alta">Alta (Menos de 10 dias)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="email-notification">Notificação por Email</label>
                        <input type="email" id="email-notification" placeholder="Seu email para notificações">
                    </div>
                    <button type="submit" class="btn-primary">Salvar Item</button>
                    <button type="reset" class="btn-secondary">Limpar</button>
                </form>
            </div>

            <div class="list-container">
                <h2>Itens Cadastrados</h2>
                <div class="filters">
                    <input type="text" id="search" placeholder="Buscar itens...">
                </div>
                <ul class="item-list" id="item-list">
                    <!-- Itens serão carregados via JavaScript -->
                </ul>
            </div>
        </div>

        <div class="achievements">
            <h2>Conquistas</h2>
            <div class="badges">
                <div class="badge">🌟</div>
                <div class="badge">🚀</div>
                <div class="badge">🏆</div>
                <div class="badge locked">?</div>
                <div class="badge locked">?</div>
            </div>
        </div>

        <footer>
            <p>Sistema CRUD Gamificado &copy; 2023 - Todos os direitos reservados</p>
        </footer>
    </div>

    <div class="profile-modal" id="profile-modal">
        <div class="modal-content">
            <h2>Configurações de Perfil</h2>
            <div class="form-group">
                <label for="user-name">Seu Nome</label>
                <input type="text" id="user-name" placeholder="Seu nome" value="Vicente">
            </div>
            <div class="form-group">
                <label>Cor do Seu Avatar</label>
                <div class="color-options">
                    <div class="color-option selected" style="background: #4ecca3;" data-color="#4ecca3"></div>
                    <div class="color-option" style="background: #3498db;" data-color="#3498db"></div>
                    <div class="color-option" style="background: #e74c3c;" data-color="#e74c3c"></div>
                    <div class="color-option" style="background: #f1c40f;" data-color="#f1c40f"></div>
                    <div class="color-option" style="background: #9b59b6;" data-color="#9b59b6"></div>
                    <div class="color-option" style="background: #1abc9c;" data-color="#1abc9c"></div>
                </div>
            </div>
            <div class="form-group">
                <label for="user-email">Email para Notificações</label>
                <input type="email" id="user-email" placeholder="Seu email">
            </div>
            <button type="button" class="btn-primary" id="save-profile">Salvar Configurações</button>
            <button type="button" class="btn-secondary" id="close-modal">Fechar</button>
        </div>
    </div>

    <script>
        // Dados da aplicação
        const items = JSON.parse(localStorage.getItem('crudItems')) || [
            { 
                id: 1, 
                name: "Estudar JavaScript", 
                category: "tarefa", 
                description: "Estudar recursos avançados de JS", 
                priority: "alta",
                dueDate: "2023-12-10"
            },
            { 
                id: 2, 
                name: "Finalizar Projeto CRUD", 
                category: "desafio", 
                description: "Completar o projeto final do curso", 
                priority: "alta",
                dueDate: "2023-12-05"
            },
            { 
                id: 3, 
                name: "Revisar Documentação", 
                category: "tarefa", 
                description: "Revisar documentação do projeto", 
                priority: "media",
                dueDate: "2023-12-20"
            }
        ];

        // Elementos do DOM
        const itemForm = document.getElementById('item-form');
        const itemList = document.getElementById('item-list');
        const searchInput = document.getElementById('search');
        const userAvatar = document.getElementById('user-avatar');
        const profileModal = document.getElementById('profile-modal');
        const saveProfileBtn = document.getElementById('save-profile');
        const closeModalBtn = document.getElementById('close-modal');
        const xpBar = document.getElementById('xp-bar');
        const colorOptions = document.querySelectorAll('.color-option');

        // Carregar configurações do usuário
        const userSettings = JSON.parse(localStorage.getItem('userSettings')) || {
            name: 'Vicente',
            color: '#4ecca3',
            email: ''
        };

        // Aplicar configurações do usuário
        function applyUserSettings() {
            userAvatar.textContent = userSettings.name.charAt(0);
            userAvatar.style.background = userSettings.color;
            document.documentElement.style.setProperty('--user-color', userSettings.color);
            document.getElementById('user-name').value = userSettings.name;
            document.getElementById('user-email').value = userSettings.email;
            
            // Selecionar a cor correta no modal
            colorOptions.forEach(option => {
                if (option.dataset.color === userSettings.color) {
                    option.classList.add('selected');
                } else {
                    option.classList.remove('selected');
                }
            });
        }

        // Inicializar a aplicação
        function initApp() {
            applyUserSettings();
            renderItems();
            updateXpBar();
            
            // Event Listeners
            itemForm.addEventListener('submit', handleFormSubmit);
            searchInput.addEventListener('input', handleSearch);
            userAvatar.addEventListener('click', () => {
                profileModal.style.display = 'flex';
            });
            
            saveProfileBtn.addEventListener('click', saveUserSettings);
            closeModalBtn.addEventListener('click', () => {
                profileModal.style.display = 'none';
            });
            
            colorOptions.forEach(option => {
                option.addEventListener('click', () => {
                    colorOptions.forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                });
            });
            
            // Fechar modal clicando fora
            profileModal.addEventListener('click', (e) => {
                if (e.target === profileModal) {
                    profileModal.style.display = 'none';
                }
            });
        }

        // Renderizar itens
        function renderItems(itemsToRender = items) {
            itemList.innerHTML = '';
            
            if (itemsToRender.length === 0) {
                itemList.innerHTML = '<li class="no-items">Nenhum item encontrado</li>';
                return;
            }
            
            itemsToRender.forEach(item => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <div class="item-info">
                        <strong>${item.name}</strong>
                        <p>${translateCategory(item.category)} - 
                           <span class="priority-badge priority-${item.priority}">
                               ${translatePriority(item.priority)}: ${getDueDateText(item.priority)}
                           </span>
                        </p>
                        ${item.description ? `<small>${item.description}</small>` : ''}
                    </div>
                    <div class="item-actions">
                        <button class="btn-edit" onclick="editItem(${item.id})">Editar</button>
                        <button class="btn-delete" onclick="deleteItem(${item.id})">Excluir</button>
                    </div>
                `;
                itemList.appendChild(li);
            });
        }

        // Funções de tradução
        function translateCategory(category) {
            const categories = {
                'tarefa': 'Tarefa',
                'desafio': 'Desafio',
                'missao': 'Missão',
                'evento': 'Evento'
            };
            return categories[category] || category;
        }

        function translatePriority(priority) {
            const priorities = {
                'baixa': 'Baixa',
                'media': 'Média',
                'alta': 'Alta'
            };
            return priorities[priority] || priority;
        }

        function getDueDateText(priority) {
            const dueDates = {
                'baixa': 'Mais de 15 dias',
                'media': '10-15 dias',
                'alta': 'Menos de 10 dias'
            };
            return dueDates[priority] || '';
        }

        // Manipular envio do formulário
        function handleFormSubmit(e) {
            e.preventDefault();
            
            const newItem = {
                id: items.length > 0 ? Math.max(...items.map(item => item.id)) + 1 : 1,
                name: document.getElementById('name').value,
                category: document.getElementById('category').value,
                description: document.getElementById('description').value,
                priority: document.getElementById('priority').value,
                dueDate: calculateDueDate(document.getElementById('priority').value)
            };
            
            items.push(newItem);
            saveItems();
            renderItems();
            itemForm.reset();
            
            // Notificação por email (simulação)
            const email = document.getElementById('email-notification').value || userSettings.email;
            if (email) {
                simulateEmailNotification(email, newItem);
            }
            
            // Efeito visual de confirmação
            showNotification('Item salvo com sucesso!', 'success');
        }

        // Calcular data de vencimento
        function calculateDueDate(priority) {
            const today = new Date();
            const dueDate = new Date();
            
            switch(priority) {
                case 'alta':
                    dueDate.setDate(today.getDate() + 7); // 7 dias
                    break;
                case 'media':
                    dueDate.setDate(today.getDate() + 12); // 12 dias
                    break;
                case 'baixa':
                    dueDate.setDate(today.getDate() + 20); // 20 dias
                    break;
                default:
                    dueDate.setDate(today.getDate() + 14); // Padrão: 14 dias
            }
            
            return dueDate.toISOString().split('T')[0];
        }

        // Simular notificação por email
        function simulateEmailNotification(email, item) {
            console.log(`Email enviado para: ${email}`);
            console.log(`Assunto: Nova tarefa - ${item.name}`);
            console.log(`Conteúdo: Você adicionou uma nova tarefa com prioridade ${translatePriority(item.priority)}. Prazo: ${getDueDateText(item.priority)}`);
            
            showNotification(`Notificação enviada para ${email}`, 'info');
        }

        // Manipular busca
        function handleSearch() {
            const searchText = this.value.toLowerCase();
            const filteredItems = items.filter(item => 
                item.name.toLowerCase().includes(searchText) || 
                item.description.toLowerCase().includes(searchText)
            );
            renderItems(filteredItems);
        }

        // Editar item
        window.editItem = function(id) {
            const item = items.find(item => item.id === id);
            if (item) {
                document.getElementById('name').value = item.name;
                document.getElementById('category').value = item.category;
                document.getElementById('description').value = item.description;
                document.getElementById('priority').value = item.priority;
                
                // Remover o item da lista para edição
                const index = items.findIndex(i => i.id === id);
                if (index !== -1) {
                    items.splice(index, 1);
                    saveItems();
                    renderItems();
                }
            }
        };

        // Excluir item
        window.deleteItem = function(id) {
            if (confirm('Tem certeza que deseja excluir este item?')) {
                const index = items.findIndex(item => item.id === id);
                if (index !== -1) {
                    items.splice(index, 1);
                    saveItems();
                    renderItems();
                    showNotification('Item excluído com sucesso!', 'success');
                }
            }
        };

        // Salvar configurações do usuário
        function saveUserSettings() {
            userSettings.name = document.getElementById('user-name').value;
            userSettings.email = document.getElementById('user-email').value;
            
            const selectedColor = document.querySelector('.color-option.selected');
            if (selectedColor) {
                userSettings.color = selectedColor.dataset.color;
            }
            
            localStorage.setItem('userSettings', JSON.stringify(userSettings));
            applyUserSettings();
            profileModal.style.display = 'none';
            showNotification('Configurações salvas com sucesso!', 'success');
        }

        // Salvar itens no localStorage
        function saveItems() {
            localStorage.setItem('crudItems', JSON.stringify(items));
        }

        // Atualizar barra de XP
        function updateXpBar() {
            const xp = items.length * 10;
            const xpPercentage = Math.min(100, (xp / 500) * 100);
            xpBar.style.width = `${xpPercentage}%`;
            
            const pointsElement = document.querySelector('.points');
            if (pointsElement) {
                pointsElement.textContent = `${xp} XP`;
            }
        }

        // Mostrar notificação
        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.textContent = message;
            notification.style.position = 'fixed';
            notification.style.top = '20px';
            notification.style.right = '20px';
            notification.style.padding = '15px 20px';
            notification.style.borderRadius = '5px';
            notification.style.color = 'white';
            notification.style.zIndex = '1000';
            notification.style.boxShadow = '0 3px 10px rgba(0,0,0,0.2)';
            
            if (type === 'success') {
                notification.style.background = 'var(--secondary)';
            } else if (type === 'error') {
                notification.style.background = 'var(--danger)';
            } else {
                notification.style.background = 'var(--info)';
            }
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transition = 'opacity 0.5s';
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 500);
            }, 3000);
        }

        // Inicializar a aplicação quando o DOM estiver carregado
        document.addEventListener('DOMContentLoaded', initApp);
    </script>
</body>
</html>

